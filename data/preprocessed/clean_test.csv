"message";"is_toxic"
"it does not look right";"1"
"this looks like cr p";"1"
"what the f*ck are you talking about";"1"
"that is a mofo";"1"
"eat $hit";"1"
"wtf";"1"
"wth";"1"
"ah! okay. new plan: add the following to the top of ginport::invalidateevents : void ginport::invalidateevents v8::local<v8::context> context { // no need to invalidate the events if the contextitself was already // invalidated; the apieventhandler will have already cleaned up the // listeners. if state_ == kinvalidated return; ... } then, i think we should not need any special workarounds either here or in the test's js file. mind giving that a try";"0"
"ah, how about using: const bool region_dump = argc == 9 ; if region_dump { ... } else { area_size = screen_size; }";"0"
"ah, i did test both and both passlooking at the test, of course if first is already false when we start the test, we never set visible to false, and of course commit will be executed. fixed.";"0"
"ah, i did not realize isactive takes an error... yuckmaybe go back to you previous version... butthen again, see comment below -- this check should probably go away.";"1"
"ah, i had tried that but got various build errors regarding libprotobuf-mutator, so was not sure whether that cl is supposed to build at all. here's the error fwiw it is possible i am doing something stupid, i am not too familiar with platform/ec : cr e43b469f3... mnissler toroa /trunk/src/platform/ec $ board=cr50; make -j buildfuzztests build host-cr50_fuzz build host-host_command_fuzz make 1 : 'build/host/host_command_fuzz/host_command_fuzz.exe' is up to date. make obj=/mnt/host/source/src/platform/ec/build/host/cr50_fuzz/cryptoc support_unaligned=1 config_upto_sha512=y -c /mnt/host/source/src/third_party/cryptoc make 2 : '/mnt/host/source/src/platform/ec/build/host/cr50_fuzz/cryptoc/libcryptoc.a' is up to date. cxx rw/fuzz/cr50_fuzz.o fuzz/cr50_fuzz.cc:14:10: fatal error: 'src/libfuzzer/libfuzzer_macro.h' file not found #include <src/libfuzzer/libfuzzer_macro.h> 1 error generated. make 1 : *** makefile.rules:444: build/host/cr50_fuzz/rw/fuzz/cr50_fuzz.o error 1 make: *** makefile.rules:336: host-cr50_fuzz error 2";"0"
"ah, i missed this comment. this may be why we see issues, in statemanagergl it will sync the active program before syncing the transform feedback so no, it wont go back and reset the program to the correct one for the upcoming draw call. you should resetithere, changing gl state while syncing dirty bits is one place we need to be careful.";"0"
"ah, i see, you'd have to change cros_set_lsb_release to treat """" and none the same way. up to you.";"0"
"ah, i see. yeah, that is ugly. fine by me to keep it the way you have it";"0"
"ah, i thought you were referring to 'null instanceof classa' i will add sensitivity to nullchecks in a follow up.";"0"
"ah, no. it just my stupidity and lack of tests which i am about to write . so, would you prefer _entry role=none, roles=none, ... or _entry roles, ... and checking type role == 'list' both a bit weird... like a have a feeling it would be unexpected for most that 'role' can actually be a list.";"1"
"ah, right. for some stupid reason, i did not think i2c_dev->irq was valid until after devm_request_irq . nevermind then.";"1"
"ah, right. i feel like i suckat shellscripting now.";"1"
"ah, right. you could scopedfd::release in that case. that might seem more idiomatic than having two variables. unfortunately there is the fstat... yucki do not like any of the choices :-";"1"
"ah, shitwill fix.";"1"
"chatted offline with norvez ahassani . it looks like required_use=""dlc"" suits fine to the purpose - fail to build. however, we move the required_use=""dlc"" to test-dlc.ebuild and dummy-dlc.ebuild to avoid pollute this global ebuild.";"0"
"cheat code: you are not *required* to have full blown docstrings in private functions. so you can drop something if you think it is not adding value.";"0"
"check functiondecl->getcanonicaldecl ->getlocation != functiondecl->getlocation to avoid useless notes";"0"
"check hasstylusinput somewhere so watcher_ is never started for devices that will never see a stylus";"0"
"check if the jit is enabled then. it sucksto not have coverage.";"1"
"check if we get postamble where all pixels are black.";"0"
"check triggers abort internally when matched, which might be a bit too aggressive. i just verified that all inputs on framework side are coming from internal sources, so we might be okay with the daemon being kicked and restarted.";"0"
"check yourself before you wreck yourself...";"1"
"check pid != -1";"0"
"checkimage ; should be below buildstatuspanel ; loadsupport ; buildimageviewer ; buildstatuspanel ; checkimage ;";"0"
"checking the _reg_page_count register is more reliable. raising an exception skips the following stopdumpingtomemory call, meaning that the audio continues to dump.";"0"
"checkpatch hates all of these m_xxx macros";"1"
"checkpatch.pl failure. since this is a cherry pick, we have to ignore this.";"0"
"child here should be a plain cbb, so: bssl::scopedcbb output_cbb; cbb child;";"0"
"child_inline_direction is a gridtracksizingdirection enum, while what we need to passis a gridaxis enum.";"0"
"chown chronos $swap_field_trial_enrolled";"0"
"chown chronos $swap_field_trial_forced $swap_enable_file";"0"
"chromite.cros.commands.* contradicts that. : find stays, although an os.walkdirs or similar perhaps the find was used since it is far simpler than the walkdirs crapimo .";"1"
"chunkedcopy and friends/i hate gerrit/you probably searched for the use and it did not show any results because gerrit's code review view is functionally retarded.";"0"
"cleaner: use ref com.intellij.openapi.util.ref instead. e.g. final ref<boolean> result = new ref<boolean> false ; ... ref.set true ... return ref.get";"0"
"cleanuptabnodes triggers garbage collection and expects that the caller not only passes in deleted_node_ids , but also that the caller will actually honor the decided garbage collection i.e. send tombstones . this is not possible for some calling sites, in particular the scenario being fixed here during restore , at least in the current implementation. in future patches, i'd split and rename these functions to something like: - cleanupsession --> freeunmappedtabs , which does no sync gc. - garbagecollectfreelocaltabnodes std::set<int>* deleted_node_ids , which will trigger gc of sync entities and generate on the calling site tombstones.";"0"
"clearly the ordering was not correct as before. some comments are warranted w.r.t. the order of operations and the dependencies between them.";"0"
"clonegtrepo goes w/in the try block, else there is a race where hit rightitleaves crapbehind when it should not. also, set wipe=true here also, you are *so fricking close* to support references here- it is 5 lines or so. part of the reason i think you should do it now is that the underlying patch.fetch code is smart enough to skip the network unless necessary; further, if you did patch.fetch original_repo , your new repo would have the sha1, butthe original content would be stored in the referenced repo- meaning no need to fetch again on a subsequent run aka, if the patching failed .";"1"
"close. i do not think projectspec is the right place - i think keeping that ""dumb"" parsing based only on the schema is good. this is yet another thing thatithink would do well in a project classi think we've talked before about this a classthat wraps the schema + commands, so the commands could basically do p = project ... p.buildimage etc. for now i'd lean towards getting it in, but if we want to start that refactor now we could.";"0"
"co*n*verts";"0"
"code does not compile on windows. frameworks/compile/slang/slang_rs_export_foreach.cpp:87:2: error: extra ';' -werror=pedantic }; cc1plus: all warnings being treated as errors make 1 : *** out/host/windows-x86/obj32/executables/llvm-rs-cc_intermediates/slang_rs_export_foreach.o error 1 make 1 : *** waiting for unfinished jobs....";"0"
"code is cleaner without 'i' variable i think. how about ""for af = gpio_alt_funcs; af < gpio_alt_funcs + gpio_alt_funcs_count; af++ {""";"0"
"code was moved. i agree that magic constants suck";"1"
"collateral damage from juggling branches. i got rid of it.";"0"
"combine with prior statement, and kill extranaeous empty line.";"0"
"comma in previous line";"0"
"comment is misaligned, and should say uint32_t usr_len now.";"0"
"comment style - multi-line comments like this should go before the line in question";"0"
"comment thatitis padded to 64kb is that right";"0"
"comment what these bools stand for e.g. /* is_native */";"0"
"compatible_specific_boards = compatible_boards.difference cbuildbot_config.generic_boards use .difference, and negatives in var names suck:p";"1"
"compile the boot image with and without, and dump the init-failures. --dump-init-failures=x.log . compare, and if necessary, open a bug. do not leave a todo here.";"0"
"compiler does not like setting non-primitives object or array on the prototype object. these sorts of static objects should be on the static class";"0"
"complain very loudly if this happens. this file is machine generated and lives on a read-only partition, so if it is malformed then something terrible has happened.";"0"
"complicated. why not wait here, like discussed, and fork/sleep/kill -9 just before";"0"
"compute and assign os.path.join upstream_pkgdir... to a var, rather than redundancies here. sounds stupid/minor, but having it in one spot makes it harder to miss updating it ;";"1"
"computeminobjectslack would require some ugly const-casting. fixed the other one.";"1"
"computers do suck";"1"
"concurrentcopying* const collector_;";"0"
"config_ftrace is expensive and not necessary for systrace. all you need is config_sched_tracer.";"0"
"config_nic3com should be config_nic3com";"0"
"confirmed that this works fine in dumb mode via internal actions enter dumb mode";"0"
"consecutive_ready_count = 0";"0"
"consider a parametrizing writesms as with deletesms.";"0"
"consider adding '--id=$$' so that the pid of this script instead of the logger process is logged.";"0"
"consider adding a test for mousedown on the scrollbar, mouse up off the scrollbar. we should get the same gsb, gsu, gse.";"0"
"consider an enum classfor cleanliness.";"0"
"consider checking that in.dataavail == 0 at this point. i.e., there is no trailing garbage.";"0"
"consider iterating over staticipparameters::kproperties instead.";"0"
"consider moving dhcp_properties out of properties. i am a little wary of adding dynamic allocation to a struct's ctor, since i tend of think of structs as ""dumb"". and, with dhcpproperties itself being a composition of multiple fields, i feel like the two levels of nesting is more confusing than helpful.";"0"
"consider objects.tostringhelper";"0"
"consider parameterizing these tests as they all seem to be duplicated for white and black param would be white, black also the comments seem like they belong above the test_f instead of inside the test body";"0"
"consider using std::string* out that you only overwrite if getstring is successful see below .";"0"
"consider const createapp = app_management.fakepagehandler.createapp;";"0"
"consider: typedef std::vector<uint8_t> bytebuffer;";"0"
"considering the code exits immediately after, reason this is not a cros_build_lib.die";"0"
"consolidate to one line allow netd self:netlink_tcpdiag_socket { create_socket_perms nlmsg_read nlmsg_write };";"0"
"const as const can.. this should be const svxboxitem*";"0"
"const bootcontrolinterface* const boot_control;";"0"
"const mb_mode_info *mbmi";"0"
"const std::string to avoid anuseless copy";"0"
"const struct bo_ops *bo_ops;";"0"
"const struct edid *edid";"0"
"const uint16_t* too.";"0"
"constexpr if possible. the brightest shade of pink is probably the most strand-out color i can think of.";"0"
"constexpr size_t kalignment";"0"
"container should be empty already, so need to remove";"0"
"convert all subprocess to cros_build_lib.runcommand";"0"
"correct -- this is how 'gerrit' has always operated thus far. i agree it is crappybehavior.";"1"
"correct hash: 7e3b7dc76c41f9042a7079eb07d071f744bbd87a";"0"
"correct me if i am wrong, butithink here what you want is if xxx.encryption_type in ... : auth_fn = a elif ... auth_fn = b else auth_fn = c # _authenticateopen or, what about doing authentication_methods = { 'wpa': self._authenticatewpa, 'wp2a': xx, 'wep': xx } auth_process = authentication_methods.get self.ap.encrypt_type, self._authenticteopen";"0"
"correct, they should be removed";"0"
"correct. i let this be here to run the tests on the bot. for the final version, will remove this after the libaddressinput is updated.";"0"
"correct. the consent is for make model information about a token, not for individually-identifiable information. the only way to get the underlying attestation will be to list the rp id in the enterprise policy, because that enables the individual attestation bit in the register request and permits individual attestation generally.";"0"
"correct. what the hellcould anyone do with this accidentally-public detail of the old implementation";"1"
"correction, missed the lockless updating of tempfile.tempdir guess what my next nit will be . also does not dumb assprograms that use tmp rather than tmpdir. final nit... this is duplicative of what tempdir_decorator is doing.";"1"
"could also use self._process.send_signal .. . i am not sure what the difference is. or if sigterm or sigkill is okay, self._process.terminate / self._process.kill";"0"
"could be a plain imagerequest, also update the name to thumbnail image request or similar";"0"
"could have putitin the regexp using regexp.quotemeta, but whatever";"0"
"could mreadframebuffer be null here if we do the following: - somehow dirty read_framebuffer - setreadframebufferbinding nullptr - syncdirtyobjects";"0"
"could this be beforenextrender instead of after";"0"
"could this just be 'if !input_events->input_events ->credit_card_field_edited ' here and below";"0"
"could use 'die' instead";"0"
"could we extract the interface and not have inner interfaces it makes the code using them verbose and obnoxious to read, for no real benefit.";"0"
"could we git rid of query_suffix_ feels like we canuse + base::utf8toutf16 features::answerserverquerysuffix at l89. wdyt";"0"
"could we just use a string here instead of std::vector<uint8_t> it may be more convenient for our users. it kind of sucksthat perf does not give us the buildid at mmap time. the problem is that the dso on disk could change and get remmap'd. that will break it since the key is the pathname...";"1"
"could we just use consistent units please it is kind of ridiculous to have different units for apis from the same driver... also, proper kernel comment style is: /* * blah blah blah */";"0"
"could we make this conditional dalvikvm uses libbacktrace, but adding llvm as a dependency for dalvikm sucks";"1"
"could you add a comment to describe why we should not reach this";"0"
"could you add an die to the end of this so that the build fails if the checkout fails";"0"
"could you add comment here for the led status the you expect, like following: system is on: white system is off: off system is in suspend: 1 sec of white, 1 sec of off";"0"
"could you add this too emacs sucksp";"1"
"could you change dump value as text and compare to string by expect_streq to make what this test does and see where do we fail by string diff. this is yet another code and we do not want to debug test code.";"0"
"could you check the returned value of pos if pos: pickle.dump else: ...";"0"
"could you defer to kill launch, unless it is successfully returned.";"0"
"could you make this an enum something like ''' enum classparseurloriginrestrictions { knorestrictions = 0, ksameoriginonly, }; '''";"0"
"could you name this something that indicates it concatenates the supplied keymanagers with the defaults maybe something lame like ""createwithadditionalkeymanagers""";"0"
"could you please make all local functions static instead unnamed namespaces makes names ugly in the binary and in the debugger";"0"
"could you please make it a classinstead it is already .cpp, and it is used only in c++ files - why do we need to stick to ugly c interface";"0"
"could you remove this comment while you are here it is nonsense given line 1115, and only makes code harder to understand.";"0"
"could you try to use ""wtfforward.h"" to avoid include ""wtfstring.h"" in header file";"0"
"could you wrap in a function defer func { cmd.kill cmd.wait }";"0"
"couldn't figure out a great way of doing this :";"0"
"couldn't you can simplify all of this to: bool call_service_manager_started_callback = !service_manager_context_;";"0"
"couldn't you just dereference the unique_ptrs, e.g. *expiration_times_dictionary i might be missing something though.";"0"
"couple of nits: - what needs to be destroyed this - avoid using first person pronouns in documentations.";"0"
"coward! :- cl:351570";"1"
"cppu, cppuhelper and salhelper are part of the ure stable abi so we can not just remove them because c++ extensions require them to exist.";"0"
"cq-depend is backwards. #defining the new option in board.h must be done before we turn off code if it is not defined.";"0"
"crapyes of course since the loop is gone. sigh.";"1"
"crapyes.";"1"
"crapdone.";"1"
"crap so what happens is makefiles need tabs stupid , and i have vscode to expand tabs to two spaces. i'll get this fixed up.";"1"
"crapi forgot about this other client of test_http_server... i'll take a look.";"1"
"crapmissed this comment, ill fix this in another cl";"0"
"crapthat should not be there. this was testing some -weverything related warning it thinks w and h are not initialized below, though all the paths satisfying base and png do initialize them . i might do a style passand change all such c-style tests, butitis unrelated to actually fixing triggered warnings.";"1"
"crapthese are not static because of the ut right";"1"
"crap c++ bites me in the assagain. : fixed and everywhere else i got this wrong .";"1"
"crap thank you. fixed now.";"1"
"crap yep, should be; does not change the test results, just is annoying.";"1"
"crapbizarre that i got the opposite one in each of these files!";"1"
"crapi did not do that all over. will up fix. let' see if i can find them all.";"1"
"crapi meant say 'check for null' here.";"1"
"crapi suspect we are really just papering over the real bug here.";"1"
"crapi turned if off to check something, and forgot to turn it back on. that explains why it 'passed' when performstage was wrong.";"1"
"crapi'll fix it and resubmit. thanks.";"1"
"crapit is. i actually thoughtitwas just our file. i'll send a patch upstream.";"1"
"crapmy assumption about duplex is just wrong. in addition to testing link state, what else do we need to check to create the right list";"1"
"crapour first lp64 turdin struct soinfo :-";"1"
"crapsorry about that. done.";"1"
"crapwell, at least we do not have a c++17 compiler yet. :";"1"
"crapspecifically recall that i needed to do that, although apparently forgot to do so ;";"1"
"crash_dump should not be allowed to ptrace itself";"0"
"create a new src_configure and move the econf call to that. drop the ' die' too.";"0"
"cros_build_lib.die";"0"
"cros_build_lib.die again.";"0"
"cros_build_lib.die then drop import sys";"0"
"cros_build_lib.die 'unknown value for ""cache_crx"" %s for %s', cache_crx, ids";"0"
"cthread*";"0"
"ctor overload hell. not in this patch, but consider getting rid of the ctor overloads in favor of init , initwithpaddingrect you'll need to define a rect struct or something , initwithalignment . or, a single init that takes pointers and ignores nulls.";"1"
"ctrbegin*, libc_init_*.cpp";"0"
"curious as to why the caller is not also making use of a flat_set";"0"
"current formatting looks ugly. how about pulling the code to a method then a method will also prevent code duplication.";"0"
"current_action_ != nullptr";"0"
"currently only wayland clients can put a window into the pip window state - there is no public api like maximize , which leads to this ugly hack. wrt tabletmodewindowmanager - i believe so. i do not think there is any specific logic to make it not managed by it. the bounds themselves are managed by the client, however.";"0"
"curse you, clang-format! done.";"1"
"cursed windows clipboard/done";"1"
"d0 ** 2 + d1 ** 2";"0"
"da f*** is this ! !";"1"
"dammit";"1"
"dammit :";"1"
"dammit python... a compiled language wouldn't have allowed this thx";"1"
"dammit! thanks again :/.";"1"
"dammit! thanks for keeping me honest :";"1"
"dammit, clearly i need more sleep. fixed now.";"1"
"dammit, i guessed this wouldn't work :";"1"
"dammit, i somehow fixed it in the old file in a different copy of aosp. fixed in the right place.";"1"
"dammit, new workspace config, due to dead hd...";"1"
"dammit, python.";"1"
"dammit. as usual, you are correct.";"1"
"dammit. i hate the interface for that thing. too prone to copy and paste error that has no visible effect. i'll fix this.";"1"
"dammit. hehe.";"1"
"dammit. i'll fix, upload and submit.";"1"
"damn";"1"
"damn thanks for finding this.";"1"
"damni forgot about that. i am gonna fix and chump.";"1"
"damnit, how'd that slip through...";"1"
"damnit, i missed this bug in my review. i'll submit a follow up.";"1"
"damnit, i swear i know how to speel this word. fixed.";"1"
"damnit, that was not supposed to be there. i'll remove it.";"1"
"damnit. dead debug code i did not quite sweep up.";"1"
"damnit. how about 5";"1"
"damnitithought i was using the one you always push for. they are randomized in my head now.";"1"
"damnit...";"1"
"damnlong name... shortening would be nice.";"1"
"damnstupid script :p will fix.";"1"
"damnthe mac!";"1"
"damnthem! thanks alex, i'll change it in the next round.";"1"
"damnyou :";"1"
"damnyou and your relevant nits.";"1"
"damnyou are absolutely correct. clearly that was missed entirely. well then meh.";"1"
"damnyou are right. the suite scheduler uses the test names when pulling results and job names are not a problem butthe dashboard definitely uses this field. fixed!";"1"
"damnyou are right, should be static constexpr uint32_t kbuiltinprefix = uint32_t 'g' << 16 + uint32_t 'l' << 8 + uint32_t '_' ; uint32_t prefix = *reinterpret_cast<const uint32_t*> name.c_str ; return name.size >= 4 prefix >> 8 == kbuiltinprefix;";"1"
"damn i thought i caught them all!";"1"
"damnthis is so brilliant. done. :";"1"
"damnfixed";"1"
"damnforgot to delete this after the code changed during review... well, better to leave it here than to get inconsistent with tot now i guess.";"1"
"damnforgot to update the change description. anyho, in later thought, might be better to restore the fail log so any one bringing up a new volume type, and developing a browser test for same, could get a tip on what browser test code they need to change. talk aboutitnext week.";"1"
"damngood catch, i added that if without thinking and my test just coincidentally happened to work. fixed and added another test to cover that case.";"1"
"damni knew i should have found an example without java... done.";"1"
"damni miss clue as to what the variable contains :-";"1"
"damni am really bad at this. should not happen.";"1"
"damni am really sorry, worst typo ever. at least strict_cast saves the day. :";"1"
"damnthanks for checking this!";"1"
"damnthis conflicts with my change in progress :-";"1"
"damnthis is no longer used, i'll remove that.";"1"
"damnwe should not need this, i'll also take a look.";"1"
"damnwill get rid of this.";"1"
"damnyes i forgot that i am no longer serializing the original androidproject and the reproxied version will always incorrectly succeed in deserialize. i've added the version check not exactly sure i am checking the right thing tho";"1"
"damnyou are right :-/ fixing.";"1"
"damnyou are right. my bad, the alias table was even malformed, butthis was hidden by the full resource table, which masked it completely. this is now fixed. thanks for spotting this.";"1"
"damn i could have sworn i tested that in the golo. but you are rightitis not working for me. i'll switch it.";"1"
